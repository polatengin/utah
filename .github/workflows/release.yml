name: Release Utah CLI

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup .NET
        uses: actions/setup-dotnet@67a3573c9a986a3f9c594539f4ab511d57bb3ce9 # v4.3.1
        with:
          dotnet-version: '9.0.x'

      - name: Get next version
        id: version
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            let nextVersion;
            try {
              const { data: latestRelease } = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              let [major, minor, patch] = latestRelease.tag_name.replace('v', '').split('.').map(Number);
              patch++;
              nextVersion = `${major}.${minor}.${patch}`;
            } catch (error) {
              if (error.status === 404) {
                console.log("No releases found, starting with version 0.1.0");
                nextVersion = '0.1.0';
              } else {
                throw error;
              }
            }
            console.log(`New version: ${nextVersion}`);
            core.setOutput('version', nextVersion);
            core.setOutput('new_version_tag', `v${nextVersion}`);

      - name: Update project version
        run: |
          sed -i 's|<Version>.*</Version>|<Version>${{ steps.version.outputs.version }}</Version>|' src/cli/utah.csproj
          sed -i 's|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>${{ steps.version.outputs.version }}</AssemblyVersion>|' src/cli/utah.csproj
          sed -i 's|<FileVersion>.*</FileVersion>|<FileVersion>${{ steps.version.outputs.version }}</FileVersion>|' src/cli/utah.csproj

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3.27.6
        with:
          languages: 'csharp,javascript'

      - name: Autobuild
        uses: github/codeql-action/autobuild@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3.27.6

      - name: Build
        run: dotnet build src/cli/utah.csproj --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3.27.6

      - name: Run Tests
        run: |
          echo "🧪 Running Utah CLI Tests..."

          # Run tests and capture output with color codes preserved
          if make test 2>&1 | tee test_output.log; then
            TEST_STATUS="success"
            BADGE_STATUS="passing"
            BADGE_COLOR="brightgreen"
            echo "TEST_STATUS=success" >> $GITHUB_ENV
          else
            TEST_STATUS="failure"
            BADGE_STATUS="failing"
            BADGE_COLOR="red"
            echo "TEST_STATUS=failure" >> $GITHUB_ENV
          fi

          # Extract test statistics
          TOTAL_TESTS=$(grep -o "Total tests: [0-9]*" test_output.log | grep -o "[0-9]*" || echo "0")
          PASSED_TESTS=$(grep -o "Passed: [0-9]*" test_output.log | grep -o "[0-9]*" || echo "0")
          FAILED_TESTS=$(grep -o "Failed: [0-9]*" test_output.log | grep -o "[0-9]*" || echo "0")

          # Set outputs for both badge and environment variables
          echo "TEST_STATUS=$BADGE_STATUS" >> $GITHUB_OUTPUT
          echo "COLOR=$BADGE_COLOR" >> $GITHUB_OUTPUT
          echo "TOTAL_TESTS=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "PASSED_TESTS=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_OUTPUT

          echo "TOTAL_TESTS=$TOTAL_TESTS" >> $GITHUB_ENV
          echo "PASSED_TESTS=$PASSED_TESTS" >> $GITHUB_ENV
          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV

          # Create installation instructions
          echo "## 🛠️ Installation Instructions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To install the Utah CLI, run the following command:" >> $GITHUB_STEP_SUMMARY
          echo "```sh" >> $GITHUB_STEP_SUMMARY
          echo "curl -sL https://utahshx.com/install.sh | sudo bash -s ${{ steps.version.outputs.new_version_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create test summary
          echo "## 🧪 Utah CLI Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$TEST_STATUS" = "success" ]; then
            echo "**Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Build Status:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | $TOTAL_TESTS |" >> $GITHUB_STEP_SUMMARY
          echo "| Passed | $PASSED_TESTS |" >> $GITHUB_STEP_SUMMARY
          echo "| Failed | $FAILED_TESTS |" >> $GITHUB_STEP_SUMMARY

          # Calculate success rate safely
          if [ "$TOTAL_TESTS" != "0" ]; then
            SUCCESS_RATE=$(( PASSED_TESTS * 100 / TOTAL_TESTS ))
            echo "| Success Rate | ${SUCCESS_RATE}% |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Success Rate | N/A |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$TEST_STATUS" = "success" ]; then
            echo "🎉 All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
          echo "The test suite covers all major Utah language features:" >> $GITHUB_STEP_SUMMARY
          echo "- Variable declarations and assignments" >> $GITHUB_STEP_SUMMARY
          echo "- Function definitions and calls" >> $GITHUB_STEP_SUMMARY
          echo "- Control flow (if/else, loops, switch)" >> $GITHUB_STEP_SUMMARY
          echo "- Built-in functions (console, fs, os, process, timer, utility, script)" >> $GITHUB_STEP_SUMMARY
          echo "- String manipulation and arrays" >> $GITHUB_STEP_SUMMARY
          echo "- Error handling and edge cases" >> $GITHUB_STEP_SUMMARY

      - name: Upload Test Results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: test-results
          path: |
            test_output.log
            tests/temp/
          retention-days: 30

      - name: Comment PR with Test Results
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.event_name == 'pull_request'
        with:
          script: |
            const testStatus = '${{ env.TEST_STATUS }}';
            const totalTests = '${{ env.TOTAL_TESTS }}';
            const passedTests = '${{ env.PASSED_TESTS }}';
            const failedTests = '${{ env.FAILED_TESTS }}';
            const successRate = Math.round((passedTests * 100) / totalTests);

            const statusIcon = testStatus === 'success' ? '✅' : '❌';
            const statusText = testStatus === 'success' ? 'All tests passed!' : 'Some tests failed!';

            const body = `## 🧪 Test Results ${statusIcon}

            **Status:** ${statusText}

            | Metric | Value |
            |--------|-------|
            | Total Tests | ${totalTests} |
            | Passed | ${passedTests} ✅ |
            | Failed | ${failedTests} ❌ |
            | Success Rate | ${successRate}% |

            ${testStatus === 'failure' ? '⚠️ **Please check the failed tests and fix them before merging.**' : '🎉 **Great work! All tests are passing.**'}

            You can view the detailed test results in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('🧪 Test Results')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Fail if tests failed
        if: env.TEST_STATUS == 'failure'
        run: |
          echo "❌ Tests failed!"
          exit 1

      - name: Generate Release Notes
        id: release_notes
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "📝 Generating release notes..."

          # Get the last tag, or use initial commit if no tags exist
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Last release: $LAST_TAG"

          # Get commit messages since last release
          COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:'%s' | tr '\n' ' ')
          echo "Commits: $COMMITS"

          if [ -n "$GEMINI_API_KEY" ] && [ -n "$COMMITS" ]; then
            echo "Using Gemini API to generate release notes..."
            RELEASE_NOTES=$(curl -s "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent" \
              -H "Content-Type: application/json" \
              -H "X-Goog-Api-Key: ${GEMINI_API_KEY}" \
              -d '{
                "contents": [
                  {
                    "parts": [
                      {
                        "text": "You are a release assistant that summarizes git commit messages into a changelog for the Utah CLI transpiler project. Utah transpiles TypeScript-like .shx files to bash scripts.\n\nHere are the commits:\n\n'"$COMMITS"'\n\nGenerate a concise changelog in markdown format with sections like ## Features, ## Improvements, ## Bug Fixes, etc. Focus on user-facing changes."
                      }
                    ]
                  }
                ]
              }' | jq -r ".candidates[0].content.parts[0].text" 2>/dev/null)

            if [ $? -eq 0 ] && [ -n "$RELEASE_NOTES" ] && [ "$RELEASE_NOTES" != "null" ]; then
              echo "✅ Generated release notes using Gemini API"
              echo "$RELEASE_NOTES" > release_notes.md
            else
              echo "⚠️ Failed to generate release notes with Gemini API, using fallback"
              RELEASE_NOTES="## Changes\n\nThis release includes the following commits:\n\n$(git log ${LAST_TAG}..HEAD --pretty=format:'- %s' | head -20)"
              echo -e "$RELEASE_NOTES" > release_notes.md
            fi
          else
            echo "⚠️ Gemini API key not available or no commits found, using fallback"
            RELEASE_NOTES="## Changes\n\nThis release includes various improvements and bug fixes."
            echo -e "$RELEASE_NOTES" > release_notes.md
          fi

          # Set output for use in create release step
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish
        run: |
          dotnet publish src/cli/utah.csproj --configuration Release -p:PublishSingleFile=true --self-contained true -r linux-x64 -o ./publish/linux-x64
          dotnet publish src/cli/utah.csproj --configuration Release -p:PublishSingleFile=true --self-contained true -r osx-x64 -o ./publish/osx-x64
          dotnet publish src/cli/utah.csproj --configuration Release -p:PublishSingleFile=true --self-contained true -r osx-arm64 -o ./publish/osx-arm64

      - name: Create Release
        id: create_release
        uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: |
            ${{ steps.release_notes.outputs.RELEASE_NOTES }}

            ## Installation Instructions

            To install the Utah CLI, run the following command:

            ```sh
            curl -sL https://utahshx.com/install.sh | sudo bash -s ${{ steps.version.outputs.new_version_tag }}
            ```
          tag_name: ${{ steps.version.outputs.new_version_tag }}
          release_name: Release ${{ steps.version.outputs.new_version_tag }}
          draft: false
          prerelease: false
          make_latest: true

      - name: Upload Release Assets
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/linux-x64/utah
          asset_name: utah-linux-x64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/osx-x64/utah
          asset_name: utah-osx-x64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets
        uses: actions/upload-release-asset@e8f9f06c4b078e705bd2ea027f0926603fc9b4d5 # v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/osx-arm64/utah
          asset_name: utah-osx-arm64
          asset_content_type: application/octet-stream
