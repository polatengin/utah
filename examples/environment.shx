env.load(".env");
env.load("config/.env.local");

let currentUser: string = env.get("USER", "unknown");
let homeDirectory: string = env.get("HOME", "/tmp");
let systemPath: string = env.get("PATH", "/usr/bin:/bin");

let serverPort: number = env.get("PORT", "8080");
let environment: string = env.get("NODE_ENV", "development");
let logLevel: string = env.get("LOG_LEVEL", "info");

let dbHost: string = env.get("DB_HOST", "localhost");
let dbPort: number = env.get("DB_PORT", "5432");
let dbName: string = env.get("DB_NAME", "myapp");
let dbUser: string = env.get("DB_USER", "postgres");

let apiKey: string = env.get("API_KEY", "");
let apiTimeout: number = env.get("API_TIMEOUT", "30000");
let maxRetries: number = env.get("MAX_RETRIES", "3");

let debugMode: boolean = env.get("DEBUG", "false") === "true";
let enableMetrics: boolean = env.get("ENABLE_METRICS", "false") === "true";
let useCache: boolean = env.get("USE_CACHE", "true") === "true";

env.set("PROCESSED_BY", "utah-script");
env.set("START_TIME", "$(date -Iseconds)");
env.set("PID", "$$");

if (environment === "development") {
  env.set("DEBUG", "true");
  env.set("LOG_LEVEL", "debug");
  env.set("ENABLE_HOT_RELOAD", "true");
} else if (environment === "production") {
  env.set("DEBUG", "false");
  env.set("LOG_LEVEL", "warn");
  env.delete("DEV_TOOLS");
}

function validateConfig(): boolean {
  let isValid: boolean = true;

  if (env.get("API_KEY", "") === "") {
    console.log("Warning: API_KEY not configured");
    isValid = false;
  }

  if (env.get("PORT", "0") < "1024") {
    console.log("Warning: Port number should be >= 1024");
  }

  return isValid;
}

function startApp(): void {
  console.log(`Starting application...`);
  console.log(`User: ${currentUser}`);
  console.log(`Environment: ${environment}`);
  console.log(`Port: ${serverPort}`);
  console.log(`Debug mode: ${debugMode}`);

  if (validateConfig()) {
    console.log("Configuration validated successfully");
  }
}

function cleanup(): void {
  env.delete("TEMP_TOKEN");
  env.delete("SESSION_ID");
  env.delete("PROCESSING_FLAG");
}

startApp();

let configFile: string = `${homeDirectory}/.config/myapp/config.json`;
let logFile: string = `${env.get("LOG_DIR", "/var/log")}/app.log`;
let databaseUrl: string = `postgresql://${dbUser}@${dbHost}:${dbPort}/${dbName}`;

let cacheTimeout: number = environment === "production"
  ? env.get("CACHE_TIMEOUT", "3600")
  : env.get("CACHE_TIMEOUT", "60");

let jwtSecret: string = env.get("JWT_SECRET", "development-secret-key");
let encryptionKey: string = env.get("ENCRYPTION_KEY", "default-key");

cleanup();
