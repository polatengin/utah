// Server Health Check and Auto-Recovery Script
// This script monitors server health, logs issues, and performs automatic recovery

script.enableDebug();
script.exitOnError(); // Enable strict error handling for recovery

console.log("üîç Starting comprehensive server health check...");

// Load configuration from environment file
const configFile: string = ".env";
const defaultLogLevel: string = env.get("LOG_LEVEL") ? env.get("LOG_LEVEL") : "INFO";
const maxRetries: number = env.get("MAX_RETRIES") ? env.get("MAX_RETRIES") : 3;
const alertEmail: string = env.get("ALERT_EMAIL") ? env.get("ALERT_EMAIL") : "admin@localhost";

console.log(`‚öôÔ∏è  Configuration loaded - Log Level: ${defaultLogLevel}, Max Retries: ${maxRetries}`);

// Check if running with proper privileges
let hasAdminRights: boolean = console.isSudo();
if (!hasAdminRights) {
  console.log("‚ùå Error: This script requires sudo privileges for system operations");
  console.log("Please run: sudo utah compile health-check.shx && sudo ./health-check.sh");
  exit(1);
}

console.log("‚úÖ Running with administrator privileges");

// System information gathering
const serverOS: string = os.getOS();
const processId: number = process.id();
let currentMemory: number = process.memory();
let currentCPU: number = process.cpu();

// Use ternary operators for status evaluation
let memoryStatus: string = currentMemory > 80 ? "CRITICAL" : currentMemory > 60 ? "WARNING" : "OK";
let cpuStatus: string = currentCPU > 90 ? "CRITICAL" : currentCPU > 70 ? "WARNING" : "OK";

console.log(`üìä Server OS: ${serverOS}`);
console.log(`üîß Process ID: ${processId}`);
console.log(`üíæ Memory Usage: ${currentMemory}% (${memoryStatus})`);
console.log(`‚ö° CPU Usage: ${currentCPU}% (${cpuStatus})`);

// Determine server environment using switch statement
let environment: string = "unknown";
switch (serverOS) {
  case "linux":
    environment = "production";
    break;
  case "darwin":
    environment = "development";
    break;
  case "windows":
    environment = "testing";
    break;
  default:
    environment = "unknown";
    break;
}

console.log(`üåç Environment detected: ${environment}`);

// Check if critical applications are installed
const applications: string[] = ["docker", "nginx", "git", "curl"];
let missingApps: string[] = [];
let appStatuses: string[] = [];

for (let app: string in applications) {
  let isInstalled: boolean = os.isInstalled(app);
  let status: string = isInstalled ? "‚úÖ INSTALLED" : "‚ùå MISSING";

  console.log(`${status}: ${app}`);

  if (!isInstalled) {
    missingApps[missingApps.length] = app;
  }

  appStatuses[appStatuses.length] = `${app}: ${status}`;
}

// Application health assessment using switch
let appHealthLevel: string = "";
switch (missingApps.length) {
  case 0:
    appHealthLevel = "EXCELLENT";
    break;
  case 1:
    appHealthLevel = "GOOD";
    break;
  case 2:
    appHealthLevel = "FAIR";
    break;
  default:
    appHealthLevel = "POOR";
    break;
}

console.log(`üì¶ Application Health: ${appHealthLevel} (${missingApps.length} missing)`);

// Resource monitoring and alerting with environment-based thresholds
const memoryThreshold: number = environment == "production" ? 80 : 90;
const cpuThreshold: number = environment == "production" ? 70 : 85;
let issuesFound: boolean = false;
let alertLevel: string = "INFO";

timer.start();

// Memory check with ternary operator for severity
if (currentMemory > memoryThreshold) {
  alertLevel = currentMemory > 95 ? "CRITICAL" : "WARNING";
  console.log(`‚ö†Ô∏è  HIGH MEMORY USAGE: ${currentMemory}% (threshold: ${memoryThreshold}%) - ${alertLevel}`);
  issuesFound = true;

  // Log the issue with timestamp
  let timestamp: string = process.elapsedTime();
  let logEntry: string = `[${timestamp}] ${alertLevel} MEMORY: ${currentMemory}%`;
  fs.writeFile("/var/log/health-check.log", logEntry);
}

// CPU check with switch-based response
if (currentCPU > cpuThreshold) {
  let cpuAction: string = "";

  if (currentCPU > 95) {
    cpuAction = "EMERGENCY_SHUTDOWN";
    alertLevel = "CRITICAL";
  }
  else if (currentCPU > 85) {
    cpuAction = "THROTTLE_SERVICES";
    alertLevel = "WARNING";
  }
  else {
    cpuAction = "MONITOR_CLOSELY";
    alertLevel = "INFO";
  }

  console.log(`‚ö†Ô∏è  HIGH CPU USAGE: ${currentCPU}% (threshold: ${cpuThreshold}%) - Action: ${cpuAction}`);
  issuesFound = true;

  // Log the issue
  let timestamp: string = process.elapsedTime();
  let logEntry: string = `[${timestamp}] ${alertLevel} CPU: ${currentCPU}% - ${cpuAction}`;
  fs.writeFile("/var/log/health-check.log", logEntry);
}

// Auto-recovery procedures with environment-specific logic
if (issuesFound) {
  let recoveryMode: string = environment == "production" ? "CONSERVATIVE" : "AGGRESSIVE";
  let shouldRecover: boolean = console.promptYesNo(`üîß Issues detected (${alertLevel}). Attempt ${recoveryMode} recovery?`);

  if (shouldRecover) {
    console.log(`üîÑ Starting ${recoveryMode} recovery procedures...`);

    // Environment-based recovery strategy using switch
    switch (environment) {
      case "production":
        console.log("üõ°Ô∏è  Production mode: Conservative recovery");
        console.log("üìä Monitoring system load...");
        console.log("üîÑ Graceful service restart...");
        break;
      case "development":
        console.log("üöÄ Development mode: Aggressive optimization");
        console.log("üíæ Clearing all caches...");
        console.log("üîÑ Hard service restart...");
        break;
      case "testing":
        console.log("üß™ Testing mode: Diagnostic recovery");
        console.log("üìã Collecting debug information...");
        console.log("üîç Running system diagnostics...");
        break;
      default:
        console.log("‚ùì Unknown environment: Basic recovery");
        break;
    }

    // Generate recovery delay based on alert level
    let recoveryDelay: number = alertLevel == "CRITICAL" ? utility.random(500, 1000) : utility.random(1000, 3000);
    console.log(`‚è≥ Waiting ${recoveryDelay}ms before recovery...`);

    let recoverySteps: string = alertLevel == "CRITICAL" ? "emergency" : "standard";
    console.log(`ÔøΩ Executing ${recoverySteps} recovery steps...`);

    console.log("‚úÖ Recovery procedures completed");
  } else {
    console.log("‚è≠Ô∏è  Recovery skipped by user");
  }
}

// File system health check
let logDir: string = "/var/log";
let logDirName: string = fs.dirname("/var/log/health-check.log");
let logFileName: string = fs.fileName("/var/log/health-check.log");

console.log(`üìÅ Log directory: ${logDirName}`);
console.log(`üìÑ Log file: ${logFileName}`);

// Configuration validation
let configPaths: string[] = ["/etc/nginx/nginx.conf", "/etc/docker/daemon.json"];
for (let configPath: string in configPaths) {
  let configDir: string = fs.dirname(configPath);
  let configFile: string = fs.fileName(configPath);
  let configExt: string = fs.extension(configPath);

  console.log(`‚öôÔ∏è  Config: ${configFile} (${configExt}) in ${configDir}`);
}

// Generate comprehensive report
let reportData: string[] = [];
reportData[0] = `Server Health Report`;
reportData[1] = `===================`;
reportData[2] = `OS: ${serverOS}`;
reportData[3] = `Memory: ${currentMemory}%`;
reportData[4] = `CPU: ${currentCPU}%`;
reportData[5] = `Issues Found: ${issuesFound ? "Yes" : "No"}`;

let reportContent: string = reportData.join("\n");
fs.writeFile("/tmp/health-report.txt", reportContent);

let executionTime: number = timer.stop();
console.log(`‚è±Ô∏è  Health check completed in ${executionTime}ms`);

if (issuesFound) {
  console.log("‚ö†Ô∏è  Health check completed with issues - see logs for details");
  exit(1);
} else {
  console.log("üéâ All systems healthy!");
  exit(0);
}
